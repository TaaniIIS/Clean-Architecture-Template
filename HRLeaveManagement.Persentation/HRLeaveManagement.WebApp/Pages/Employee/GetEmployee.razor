@page "/employees"
@page "/GetEmployee"
@using Microsoft.AspNetCore.Components.QuickGrid
@using HRLeaveManagement.WebApp.Services

@inject IEmployeeService EmployeeService
@inject NavigationManager NavigationManager

<div class="container-fluid py-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <div class="d-flex justify-content-between align-items-center">
                <h3 class="mb-0">Employee Management</h3>
                <button class="btn btn-light" @onclick="NavigateToCreate">
                    <i class="fas fa-plus me-2"></i>Add Employee
                </button>
            </div>
        </div>

        <div class="card-body">
            @if (employees == null)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading employees...</p>
                </div>
            }
            else if (!employees.Any())
            {
                <div class="alert alert-info text-center">
                    No employees found
                </div>
            }
            else
            {
                <QuickGrid Items="@employees.AsQueryable()" Class="table table-hover table-striped">
                    <PropertyColumn Property="@(e => e.FirstName)" Title="First Name" Sortable="true" />
                    <PropertyColumn Property="@(e => e.LastName)" Title="Last Name" Sortable="true" />
                    <PropertyColumn Property="@(e => e.Email)" Title="Email" Sortable="true" />
                    <PropertyColumn Property="@(e => e.DepartmentName)" Title="Department" Sortable="true" />
                     <PropertyColumn Property="@(e => e.Shift)" Title="Shift" Sortable="true" /> 


                    <!-- Add additional columns for related entities -->
                    <TemplateColumn Title="Position">
                        @context.PositionName <!-- Will replace with actual position name later -->
                    </TemplateColumn>
                    <!-- Add additional columns for related entities -->
                    <TemplateColumn Title="job">
                        @context.JobLevel <!-- Will replace with actual position name later -->
                    </TemplateColumn>

                    <TemplateColumn Title="Actions">
                        <button @onclick="() => EditEmployee(context.EmployeeID)"
                                class="btn btn-sm btn-primary me-2">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button @onclick="() => DeleteEmployee(context.EmployeeID)"
                                class="btn btn-sm btn-danger">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </TemplateColumn>
                </QuickGrid>
            }
        </div>
    </div>
</div>

@code {
    private List<EmployeeViewModel> employees;

    private string errorMessage = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        // employees = await EmployeeService.Get();
        // StateHasChanged();

        try
        {
            employees = await EmployeeService.Get();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading employees: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/employees/create");
    }

    private void EditEmployee(int id)
    {
        NavigationManager.NavigateTo($"/employees/edit/{id}");
    }

    private async Task DeleteEmployee(int id)
    {
        //if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this employee?"))
        {
            var result = await EmployeeService.Delete(id);
            if (result)
            {
                await LoadEmployees();
            }
        }
    }
}


@*
@page "/employees"
@inject IEmployeeService EmployeeService
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Employee Management</h2>
        <button class="btn btn-primary" @onclick="AddNewEmployee">
            <i class="bi bi-plus-circle"></i> New Employee
        </button>
    </div>

    @if (employees == null)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading employees...</p>
        </div>
    }
    else if (!employees.Any())
    {
        <div class="alert alert-info">No employees found.</div>
    }
    else
    {
        <QuickGrid Items="@employees" Class="table table-striped table-hover">

        </QuickGrid>
    }
</div>

@if (showEditModal)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(currentEmployee.DepartmentID == 0 ? "Add New Employee" : "Edit Employee")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@currentEmployee" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="firstName" class="form-label">First Name</label>
                                <InputText id="firstName" @bind-Value="currentEmployee.FirstName" class="form-control" />
                            </div>
                            <div class="col-md-6">
                                <label for="lastName" class="form-label">Last Name</label>
                                <InputText id="lastName" @bind-Value="currentEmployee.LastName" class="form-control" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" @bind-Value="currentEmployee.Email" class="form-control" />
                        </div>
                        <!-- We'll add dropdowns for related entities in the next iteration -->
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<EmployeeViewModel> employees;// = new();
    private EmployeeViewModel currentEmployee = new();
    private bool showEditModal = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        try
        {
            employees = await EmployeeService.Get();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading employees: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private void AddNewEmployee()
    {
        currentEmployee = new EmployeeViewModel();
        showEditModal = true;
    }

    private async Task EditEmployee(int id)
    {
        currentEmployee = await EmployeeService.GetById(id);
        if (currentEmployee != null)
        {
            showEditModal = true;
        }
        else
        {
            errorMessage = "Employee not found";
        }
    }

    private async Task DeleteEmployee(int id)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this employee?");
        if (confirm)
        {
            var result = await EmployeeService.Delete(id);
            if (result)
            {
                await LoadEmployees();
            }
            else
            {
                errorMessage = "Failed to delete employee";
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (currentEmployee.EmployeeID == 0)
            {
                // New employee
                var createdEmployee = await EmployeeService.Post(currentEmployee);
                if (createdEmployee != null)
                {
                    await LoadEmployees();
                    CloseModal();
                }
            }
            else
            {
                // Update existing
                var updatedEmployee = await EmployeeService.Put(currentEmployee.EmployeeID, currentEmployee);
                if (updatedEmployee != null)
                {
                    await LoadEmployees();
                    CloseModal();
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving employee: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private void CloseModal()
    {
        showEditModal = false;
        StateHasChanged();
    }
}

           *@     