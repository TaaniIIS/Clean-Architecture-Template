@page "/leavetypes/create"
@inject ILeaveTypeService LeaveTypeService
@inject NavigationManager Navigation


<h3>Create Leave Type</h3>

<EditForm Model="@newLeaveType" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name" class="form-label">Name *</label>
        <InputText id="name" @bind-Value="newLeaveType.Name" class="form-control" />
        <ValidationMessage For="@(() => newLeaveType.Name)" />
    </div>

    <div class="mb-3">
        <label for="defaultDays" class="form-label">Default Days *</label>
        <InputNumber id="defaultDays" @bind-Value="newLeaveType.DefaultDays" class="form-control" />
        <ValidationMessage For="@(() => newLeaveType.DefaultDays)" />
    </div>

    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
        @if (isSubmitting)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span class="visually-hidden">Loading...</span>
        }
        Create
    </button>
    <button type="button" class="btn btn-secondary ms-2" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    private LeaveTypeViewModel newLeaveType = new();
    private bool isSubmitting = false;

    private async Task HandleSubmit()
    {
        isSubmitting = true;

        try
        {
            var response = await LeaveTypeService.CreateAsync(newLeaveType);

            if (response?.Success == true)
            {
                Navigation.NavigateTo("/leavetypes");
            }
            else
            {
               // ToastService.ShowError(response?.Message ?? "Failed to create leave type");
            }
        }
        catch (Exception ex)
        {
            //ToastService.ShowError($"Error creating leave type: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/leavetypes");
    }
}