@page "/GetDepartment"
@using HRLeaveManagement.Application.Features.Departments
@using HRLeaveManagement.WebApp.Services
@inject IDepartmentService DepartmentService

<div class="department-container">
    <!-- Header and Add Button -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3>Department Management</h3>
        <button class="btn btn-primary" @onclick="ToggleAddForm">
            @(showAddForm ? "Cancel" : "Add Department")
        </button>
    </div>

    <!-- Add Department Form (Conditional) -->
    @if (showAddForm)
    {
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">Create New Department</h5>

                <EditForm Model="_newDepartment" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                     <div class="form-group">
                        <label>Department Name</label>
                        <InputText @bind-Value="_newDepartment.Name" class="form-control" />
                        <ValidationMessage For="@(() => _newDepartment.Name)" />
                    </div>

                    <button type="submit" class="btn btn-success" disabled="@_isSubmitting">
                        @(_isSubmitting ? "Creating..." : "Create Department")
                    </button>
                </EditForm>

                @if (!string.IsNullOrEmpty(_message))
                {
                    <div class="alert @(_isSuccess ? "alert-success" : "alert-danger") mt-3">
                        @_message
                    </div>
                }
            </div>
        </div>
    }

    <!-- Departments List Table -->
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Created Date</th>
                </tr>
            </thead>
            <tbody>
                @if (departments == null)
                {
                    <tr>
                        <td colspan="3" class="text-center">Loading departments...</td>
                    </tr>
                }
                else if (!departments.Any())
                {
                    <tr>
                        <td colspan="3" class="text-center">No departments found</td>
                    </tr>
                }
                else
                {
                    @foreach (var department in departments)
                    {
                        <tr>
                            <td>@department.Departmentid</td>
                            <td>@department.Name</td>
                            @* <td>@department.CreatedDate.ToString("dd/MM/yyyy")</td> *@
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<DepartmentDto> departments;
    private bool showAddForm = false;
    private DepartmentDto _newDepartment = new();
    private bool _isSubmitting = false;
    private string _message = string.Empty;
    private bool _isSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDepartments();
    }

    private async Task LoadDepartments()
    {
        departments = await DepartmentService.Get();
        StateHasChanged();
    }

    private void ToggleAddForm()
    {
        showAddForm = !showAddForm;
        if (!showAddForm)
        {
            _newDepartment = new DepartmentDto();
            _message = string.Empty;
        }
    }

    private async Task HandleValidSubmit()
    {
        _isSubmitting = true;
        _message = string.Empty;

        try
        {
            var result = await DepartmentService.Post(_newDepartment);
            _isSuccess = result.Success;
            _message = result.Message;

            if (result.Success)
            {
                _newDepartment = new DepartmentDto();
                showAddForm = false;
                await LoadDepartments();
            }
        }
        catch (Exception ex)
        {
            _isSuccess = false;
            _message = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _isSubmitting = false;
        }
    }
}