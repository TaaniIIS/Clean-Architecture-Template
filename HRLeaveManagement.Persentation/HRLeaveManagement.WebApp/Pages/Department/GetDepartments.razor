@page "/departments"
@page "/GetDepartment"
@using Microsoft.AspNetCore.Components.QuickGrid
@using HRLeaveManagement.Application.Features.Departments
@using HRLeaveManagement.WebApp.Services

@inject IDepartmentService DepartmentService
@inject NavigationManager NavigationManager

<div class="container-fluid py-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <div class="d-flex justify-content-between align-items-center">
                <h3 class="mb-0">Department Management</h3>
                <button class="btn btn-light" @onclick="NavigateToCreate">
                    <i class="fas fa-plus me-2"></i>Add Department
                </button>
            </div>
        </div>

        <div class="card-body">
            @if (departments == null)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading departments...</p>
                </div>
            }
            else if (!departments.Any())
            {
                <div class="alert alert-info text-center">
                    No departments found
                </div>
            }
            else
            {
              <QuickGrid Items="@departments.AsQueryable()" Class="table table-hover table-striped">
    <PropertyColumn Property="@(d => d.Departmentid)" Title="ID" Sortable="true" />
    <PropertyColumn Property="@(d => d.Name)" Title="Name" Sortable="true" />

                    <TemplateColumn Title="Actions">
                        <button @onclick="() => EditDepartment(context.Departmentid)"
                                class="btn btn-sm btn-primary">
                            Edit
                        </button>
                        <button @onclick="() => DeleteDepartment(context.Departmentid)"
                                class="btn btn-sm btn-danger">
                            Delete
                        </button>
                    </TemplateColumn>
</QuickGrid>
            }
        </div>
    </div>
</div>

@code {
    private List<DepartmentViewModel> departments; // Change from IQueryable to List

    protected override async Task OnInitializedAsync()
    {
        await LoadDepartments();
    }

    private async Task LoadDepartments()
    {
        departments = await DepartmentService.Get(); // Now types match
        StateHasChanged();
    }

    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/departments/create");
    }

    private void EditDepartment(int id)
    {
        NavigationManager.NavigateTo($"/departments/edit/{id}");
    }

    private async Task DeleteDepartment(int id)
    {
        //if (await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this department?"))
        {
            var result = await DepartmentService.Delete(id);
            if (result.Success)
            {
                await LoadDepartments();
            }
        }
    }
}


@* @page "/GetDepartment" 
@using HRLeaveManagement.Application.Features.Departments
@using HRLeaveManagement.WebApp.Services

@inject IDepartmentService DepartmentService

<h3>Department List</h3>

@if (departments == null)
{
    <div class="alert alert-info">Loading departments...</div>
}
else if (!departments.Any())
{
    <div class="alert alert-warning">No departments found</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Created Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var dept in departments)
                {
                    <tr>
                        <td>@dept.Departmentid</td>
                        <td>@dept.Name</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<DepartmentDto>? departments;

    protected override async Task OnInitializedAsync()
    {
        await LoadDepartments();
        StateHasChanged();

    }

    private async Task LoadDepartments()
    {
        try
        {
            departments = await DepartmentService.Get();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading departments: {ex.Message}");
            // In real app, show error to user
        }
    }
}*@