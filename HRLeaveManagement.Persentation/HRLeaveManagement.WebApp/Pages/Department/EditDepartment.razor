@page "/departments/edit/{DepartmentId:int}"
@using HRLeaveManagement.Application.Features.Departments
@using HRLeaveManagement.WebApp.Services
@inject IDepartmentService DepartmentService
@inject NavigationManager NavigationManager
@inject ILogger<EditDepartment> Logger

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-edit me-2"></i>
                        Edit Department
                    </h5>
                </div>

                <div class="card-body">
                    @if (_isLoading)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (_department == null)
                    {
                        <div class="alert alert-danger">
                            Department not found
                        </div>
                    }
                    else
                    {
                        <EditForm Model="_department" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />

                            <div class="mb-3">
                                <label class="form-label">Department ID</label>
                                <input class="form-control" value="@_department.Departmentid" disabled />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Department Name *</label>
                                <InputText @bind-Value="_department.Name"
                                           class="form-control" />
                                <ValidationMessage For="@(() => _department.Name)" class="text-danger small" />
                            </div>
                             <div class="mb-3">
                                <label class="form-label">Department Description *</label>
                                <InputText @bind-Value="_department.Description"
                                           class="form-control" />
                                <ValidationMessage For="@(() => _department.Description)" class="text-danger small" />
                            </div>
                             <div class="mb-3">
                                <label class="form-label">Department CreatedDate *</label>
                                <InputDate @bind-Value="_department.CreatedDate"
                                           class="form-control" />
                                <ValidationMessage For="@(() => _department.CreatedDate)" class="text-danger small" />
                            </div>

                            <div class="d-flex justify-content-end gap-2 mt-4">
                                <button type="button" class="btn btn-outline-secondary" @onclick="NavigateToList"
                                        disabled="@_isSaving">
                                    Cancel
                                </button>
                                <button type="submit" class="btn btn-primary" disabled="@_isSaving">
                                    @if (_isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    }
                                    Save Changes
                                </button>
                            </div>
                        </EditForm>
                    }

                    @if (!string.IsNullOrEmpty(_errorMessage))
                    {
                        <div class="alert alert-danger mt-3">
                            @_errorMessage
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public int DepartmentId { get; set; }

    private DepartmentViewModel _department = new();
    private bool _isLoading = true;
    private bool _isSaving = false;
    private string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await DepartmentService.GetById(DepartmentId);
            if (response != null)
            {
                _department = response;
            }
            else
            {
                _errorMessage = "Department not found";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading department");
            _errorMessage = $"Error loading department: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (_isSaving) return;

        _isSaving = true;
        _errorMessage = string.Empty;
        var result = await DepartmentService.Put(DepartmentId, _department);
        // try
        // {
        //     Add validation
        //     if (string.IsNullOrWhiteSpace(_department.Name))
        //     {
        //         _errorMessage = "Department name is required";
        //         return;
        //     }

        //     var result = await DepartmentService.Put(DepartmentId, _department);

        //     if (result.Success)
        //     {
        //         NavigationManager.NavigateTo("/departments");
        //     }
        //     else
        //     {
        //         _errorMessage = result.Message ?? "Failed to update department";
        //     }
        // }
        // catch (Exception ex)
        // {
        //     Logger.LogError(ex, "Error saving department");
        //     _errorMessage = $"Save failed: {ex.Message}";
        // }
        // finally
        // {
        //     _isSaving = false;
        // }
    }

    private void NavigateToList()
    {
        NavigationManager.NavigateTo("/departments");
    }
}