@page "/departments/create"
@using HRLeaveManagement.Application.Features.Departments
@using HRLeaveManagement.WebApp.Services
@inject IDepartmentService DepartmentService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-plus-circle me-2"></i>
                            Create New Department
                        </h5>
                        <button class="btn btn-sm btn-light" @onclick="NavigateToList">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>

                <div class="card-body">
                    <EditForm Model="_department" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label for="departmentName" class="form-label">Department Name *</label>
                            <InputText id="departmentName" @bind-Value="_department.Name"
                                       class="form-control" placeholder="e.g., Human Resources" />
                            <ValidationMessage For="@(() => _department.Name)" class="text-danger small" />
                        </div>
                        <div class="mb-3">
                            <label for="Description" class="form-label">Department Description *</label>
                            <InputText id="Description" @bind-Value="_department.Description"
                                       class="form-control" placeholder="e.g., Human Resources" />
                            <ValidationMessage For="@(() => _department.Description)" class="text-danger small" />
                        </div>

                        <div class="mb-3">
                        <label for="CreatedDate" class="form-label">Created Date *</label>
                        <InputDate id="CreatedDate" 
                                   @bind-Value="_department.CreatedDate"
                                   class="form-control"
                                   placeholder="yyyy-MM-dd"
                                   format="yyyy-MM-dd" />
                        <ValidationMessage For="@(() => _department.CreatedDate)" 
                                          class="text-danger small" />
                    </div>


                       

                        <div class="d-flex justify-content-end gap-2 mt-4">
                            <button type="button" class="btn btn-outline-secondary" @onclick="NavigateToList">
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@_isSubmitting">
                                @if (_isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                Create Department
                            </button>
                        </div>

                    </EditForm>

                    @if (!string.IsNullOrEmpty(_message))
                    {
                        <div class="alert @(_isSuccess ? "alert-success" : "alert-danger") mt-3 mb-0">
                            <i class="fas @(_isSuccess ? "fa-check-circle" : "fa-exclamation-circle") me-2"></i>
                            @_message
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private DepartmentViewModel _department = new();
    private bool _isSubmitting = false;
    private string _message = string.Empty;
    private bool _isSuccess = false;

    private async Task HandleValidSubmit()
    {
        _isSubmitting = true;
        _message = string.Empty;

        try
        {
            var result = await DepartmentService.Post(_department);
            _isSuccess = result.Success;
            _message = result.Message;

            if (result.Success)
            {
                _department = new(); // Reset form
                await Task.Delay(800); // Show success briefly
                NavigationManager.NavigateTo("/departments");
            }
        }
        catch (Exception ex)
        {
            _isSuccess = false;
            _message = $"Error: {ex.Message}";
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private void NavigateToList()
    {
        NavigationManager.NavigateTo("/departments");
    }
}