@* @page "/GetPosition" *@
@* @using HRLeaveManagement.WebApp.Services *@
@* @using Microsoft.AspNetCore.Components.QuickGrid *@
@* @inject IPositionService positionViewModelservice *@



@page "/GetPosition"
@using HRLeaveManagement.WebApp.Services
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IPositionService PositionService

<h3>Position Management</h3>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="ShowAddForm">
        <i class="fas fa-plus"></i> Add Position
    </button>
</div>

<!-- Add/Edit Form -->
@if (showForm)
{
    <div class="card mb-4">
        <div class="card-body">
            <h5>@(currentPosition.PositionId == 0 ? "Add New Position" : "Edit Position")</h5>

            <EditForm Model="currentPosition" OnValidSubmit="SavePosition">
                <DataAnnotationsValidator />

                <div class="mb-3">
                    <label class="form-label">Title</label>
                    <InputText @bind-Value="currentPosition.Title" class="form-control" />
                    <ValidationMessage For="@(() => currentPosition.Title)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Job Level</label>
                    <InputText @bind-Value="currentPosition.JobLevel" class="form-control" />
                </div>

                <div class="mb-3 form-check">
                    <InputCheckbox @bind-Value="currentPosition.IsActive" class="form-check-input" />
                    <label class="form-check-label">Active</label>
                </div>

                <button type="submit" class="btn btn-success me-2">
                    @(isProcessing ? "Saving..." : "Save")
                </button>
                <button type="button" class="btn btn-secondary" @onclick="CancelForm">
                    Cancel
                </button>
            </EditForm>
        </div>
    </div>
}

<!-- Positions Grid -->
<QuickGrid Items="@positions" class="table">
    <PropertyColumn Property="@(p => p.PositionId)" Title="ID" Sortable="true" />
    <PropertyColumn Property="@(p => p.Title)" Title="Position Title" Sortable="true" />
    <PropertyColumn Property="@(p => p.JobLevel)" Title="Job Level" Sortable="true" />
    <TemplateColumn Title="Active">
        <span class="badge @(context.IsActive ? "bg-success" : "bg-secondary")">
            @(context.IsActive ? "Yes" : "No")
        </span>
    </TemplateColumn>
    <TemplateColumn Title="Actions">
        <button class="btn btn-sm btn-primary me-2" @onclick="() => EditPosition(context.PositionId)">
            <i class="fas fa-edit"></i>
        </button>
        <button class="btn btn-sm btn-danger" @onclick="() => DeletePosition(context.PositionId)">
            <i class="fas fa-trash"></i>
        </button>
    </TemplateColumn>
</QuickGrid>

@if (!positions.Any())
{
    <div class="alert alert-info mt-3">No positions found</div>
}

@code {
    private IQueryable<PositionViewModel> positions = null;//new();
    private PositionViewModel currentPosition = new();
    private bool showForm = false;
    private bool isProcessing = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadPositions();
    }

    private async Task LoadPositions()
    {
        var   positionList = await PositionService.GetAllAsync();
		positions = positionList.AsQueryable();
		StateHasChanged();
    }

    private void ShowAddForm()
    {
        currentPosition = new PositionViewModel();
        showForm = true;
    }

    private async Task EditPosition(int id)
    {
        var position = positions.FirstOrDefault(p => p.PositionId == id);
        if (position != null)
        {
            currentPosition = new PositionViewModel
                {
                    PositionId = position.PositionId,
                    Title = position.Title,
                    JobLevel = position.JobLevel,
                    IsActive = position.IsActive
                };
            showForm = true;
        }
    }

    private void CancelForm()
    {
        showForm = false;
        currentPosition = new PositionViewModel();
    }

    private async Task SavePosition()
    {
        isProcessing = true;

        try
        {
            if (currentPosition.PositionId == 0)
            {
                await PositionService.CreateAsync(currentPosition);
            }
            else
            {
                await PositionService.UpdateAsync(currentPosition.PositionId, currentPosition);
            }

            await LoadPositions();
            showForm = false;
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task DeletePosition(int id)
    {
        //if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this position?"))
        {
            await PositionService.DeleteAsync(id);
            await LoadPositions();
        }
    }
}






@*
<div class="position-container">
    <!-- Header and Add Button -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3>Position Management</h3>
        <button class="btn btn-primary" @onclick="ToggleAddForm">
            @(showAddForm ? "Cancel" : "Add Position")
        </button>
    </div>

    <!-- Add Position Form (Conditional) -->
    @if (showAddForm)
    {
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">Create New Position</h5>

                <EditForm Model="_newpositionViewModels" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label>Title</label>
                        <InputText @bind-Value="_newpositionViewModels.Title" class="form-control" />
                        <ValidationMessage For="@(() => _newpositionViewModels.Title)" />
                    </div>

                    <div class="form-group">
                        <label>Job Level</label>
                        <InputText @bind-Value="_newpositionViewModels.JobLevel" class="form-control" />
                        <ValidationMessage For="@(() => _newpositionViewModels.JobLevel)" />
                    </div>

                    <div class="form-group form-check">
                        <InputCheckbox @bind-Value="_newpositionViewModels.IsActive" class="form-check-input" />
                        <label class="form-check-label">Is Active</label>
                    </div>

                    <button type="submit" class="btn btn-success" disabled="@_isSubmitting">
                        @(_isSubmitting ? "Creating..." : "Create Position")
                    </button>
                </EditForm>

                @if (!string.IsNullOrEmpty(_message))
                {
                    <div class="alert @(_isSuccess ? "alert-success" : "alert-danger") mt-3">
                        @_message
                    </div>
                }
            </div>
        </div>
    }

    <!-- positionViewModels List Table -->
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>Position ID</th>
                    <th>Title</th>
                    <th>Job Level</th>
                    <th>Active</th>
                    <th>Operational Options</th>
                </tr>
            </thead>
            <tbody>
                @if (positionViewModels == null)
                {
                    <tr>
                        <td colspan="4" class="text-center">Loading positionViewModels...</td>
                    </tr>
                }
                else if (!positionViewModels.Any())
                {
                    <tr>
                        <td colspan="4" class="text-center">No positionViewModels found</td>
                    </tr>
                }
                else
                {
                    @foreach (var position in positionViewModels)
                    {
                        <tr>
                            <td>@position.PositionId</td>
                            <td>@position.Title</td>
                            <td>@position.JobLevel</td>
                            <td>
                                <span class="badge @(position.IsActive ? "badge-success" : "badge-secondary")">
                                    @(position.IsActive ? "Yes" : "No")
                                </span>
                            </td>
                            <td>
                                 <button class="btn btn-primary m-1" @onclick="()=>EditPosition(context.id)">Edit</button> 
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<PositionViewModel> positionViewModels;
    private bool showAddForm = false;
    private PositionViewModel _newpositionViewModels = new();
    private bool _isSubmitting = false;
    private string _message = string.Empty;
    private bool _isSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadpositionViewModels();
    }

    private async Task LoadpositionViewModels()
    {
        var PositionList= positionViewModels = await positionViewModelservice.GetAllAsync();
        StateHasChanged();
    }

    private void ToggleAddForm()
    {
        showAddForm = !showAddForm;
        if (!showAddForm)
        {
            _newpositionViewModels = new PositionViewModel();
            _message = string.Empty;
        }
    }

    private async Task HandleValidSubmit()
    {
        _isSubmitting = true;
        _message = string.Empty;

        try
        {
            var result = await positionViewModelservice.CreateAsync(_newpositionViewModels);
            _isSuccess = result.Success;
            _message = result.Message;

            if (result.Success)
            {
                _newpositionViewModels = new PositionViewModel();
                showAddForm = false;
                await LoadpositionViewModels();
            }
        }
        catch (Exception ex)
        {
            _isSuccess = false;
            _message = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _isSubmitting = false;
        }
    }
}
*@

@* @using HRLeaveManagement.WebApp.Services *@
@* @inject IpositionViewModelservice IPosition *@

@* <h3>Employee Job Experience</h3> *@

@* @if (_positionViewModels == null) *@
@* { *@
@*     <p>Loading...</p> *@
@* } *@
@* else *@
@* { *@
@*     <table class="table"> *@
@*         <thead> *@
@*             <tr> *@
@*                 <th>NO</th> *@
@*                 <th>Title</th> *@
@*                 <th>Experience Level</th> *@
@*                 <th>Status</th> *@
@*             </tr> *@
@*         </thead> *@
@*         <tbody> *@
@*             @foreach (var request in _positionViewModels) *@
@*             { *@
@*                 <tr> *@
@*                     <td>@request.PositionId</td> *@
@*                     <td>@request.Title</td> *@
@*                     <td>@request.JobLevel</td> *@
@*                     <td>@request.IsActive</td> *@

@*                 </tr> *@
@*             } *@
@*         </tbody> *@
@*     </table> *@
@* } *@

@* @code { *@
@*     private List<HRLeaveManagement.Application.Features.Position.PositionDto> _positionViewModels; *@

@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         _positionViewModels = await IPosition.Get(); *@
@*     } *@
@* } *@
