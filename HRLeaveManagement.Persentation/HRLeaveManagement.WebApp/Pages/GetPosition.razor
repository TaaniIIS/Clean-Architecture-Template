@page "/GetPosition"
@using HRLeaveManagement.Application.Features.Position
@using HRLeaveManagement.WebApp.Services
@inject IPositionService PositionService

<div class="position-container">
    <!-- Header and Add Button -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3>Position Management</h3>
        <button class="btn btn-primary" @onclick="ToggleAddForm">
            @(showAddForm ? "Cancel" : "Add Position")
        </button>
    </div>

    <!-- Add Position Form (Conditional) -->
    @if (showAddForm)
    {
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">Create New Position</h5>

                <EditForm Model="_newPosition" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label>Title</label>
                        <InputText @bind-Value="_newPosition.Title" class="form-control" />
                        <ValidationMessage For="@(() => _newPosition.Title)" />
                    </div>

                    <div class="form-group">
                        <label>Job Level</label>
                        <InputText @bind-Value="_newPosition.JobLevel" class="form-control" />
                        <ValidationMessage For="@(() => _newPosition.JobLevel)" />
                    </div>

                    <div class="form-group form-check">
                        <InputCheckbox @bind-Value="_newPosition.IsActive" class="form-check-input" />
                        <label class="form-check-label">Is Active</label>
                    </div>

                    <button type="submit" class="btn btn-success" disabled="@_isSubmitting">
                        @(_isSubmitting ? "Creating..." : "Create Position")
                    </button>
                </EditForm>

                @if (!string.IsNullOrEmpty(_message))
                {
                    <div class="alert @(_isSuccess ? "alert-success" : "alert-danger") mt-3">
                        @_message
                    </div>
                }
            </div>
        </div>
    }

    <!-- Positions List Table -->
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>Position ID</th>
                    <th>Title</th>
                    <th>Job Level</th>
                    <th>Active</th>
                </tr>
            </thead>
            <tbody>
                @if (positions == null)
                {
                    <tr>
                        <td colspan="4" class="text-center">Loading positions...</td>
                    </tr>
                }
                else if (!positions.Any())
                {
                    <tr>
                        <td colspan="4" class="text-center">No positions found</td>
                    </tr>
                }
                else
                {
                    @foreach (var position in positions)
                    {
                        <tr>
                            <td>@position.PositionId</td>
                            <td>@position.Title</td>
                            <td>@position.JobLevel</td>
                            <td>
                                <span class="badge @(position.IsActive ? "badge-success" : "badge-secondary")">
                                    @(position.IsActive ? "Yes" : "No")
                                </span>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<PositionDto> positions;
    private bool showAddForm = false;
    private PositionDto _newPosition = new();
    private bool _isSubmitting = false;
    private string _message = string.Empty;
    private bool _isSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadPositions();
    }

    private async Task LoadPositions()
    {
        positions = await PositionService.Get();
        StateHasChanged();
    }

    private void ToggleAddForm()
    {
        showAddForm = !showAddForm;
        if (!showAddForm)
        {
            _newPosition = new PositionDto();
            _message = string.Empty;
        }
    }

    private async Task HandleValidSubmit()
    {
        _isSubmitting = true;
        _message = string.Empty;

        try
        {
            var result = await PositionService.Post(_newPosition);
            _isSuccess = result.Success;
            _message = result.Message;

            if (result.Success)
            {
                _newPosition = new PositionDto();
                showAddForm = false;
                await LoadPositions();
            }
        }
        catch (Exception ex)
        {
            _isSuccess = false;
            _message = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _isSubmitting = false;
        }
    }
}











@* @using HRLeaveManagement.WebApp.Services *@
@* @inject IPositionService IPosition *@

@* <h3>Employee Job Experience</h3> *@

@* @if (_positions == null) *@
@* { *@
@*     <p>Loading...</p> *@
@* } *@
@* else *@
@* { *@
@*     <table class="table"> *@
@*         <thead> *@
@*             <tr> *@
@*                 <th>NO</th> *@
@*                 <th>Title</th> *@
@*                 <th>Experience Level</th> *@
@*                 <th>Status</th> *@
@*             </tr> *@
@*         </thead> *@
@*         <tbody> *@
@*             @foreach (var request in _positions) *@
@*             { *@
@*                 <tr> *@
@*                     <td>@request.PositionId</td> *@
@*                     <td>@request.Title</td> *@
@*                     <td>@request.JobLevel</td> *@
@*                     <td>@request.IsActive</td> *@

@*                 </tr> *@
@*             } *@
@*         </tbody> *@
@*     </table> *@
@* } *@

@* @code { *@
@*     private List<HRLeaveManagement.Application.Features.Position.PositionDto> _positions; *@

@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         _positions = await IPosition.Get(); *@
@*     } *@
@* } *@
